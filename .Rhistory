import pymc_marketing.mettrics as met
reticulate::use_condaenv("pymc-nutpie", required = T)
reticulate::repl_python()
library(reticulate)
py_gc <- import("gc")
py_gc$collect()
reticulate::repl_python()
#| include: false
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
setwd("~/DeVries_WP/")
library(rpart)
library(rpart.plot)
library(ggplot2)
library(tidyverse)
library(plotly)
library(ggpubr)
library(randomForest)
library(fields)
library(mnormt)
library(DiagrammeR)
library(future)
library(future.apply)
library(BART)
library(matrixStats)
library(ggnewscale)
library(raster)
library(sf)
library(geojsonsf)
library(scoringRules)
library(stringr)
library(viridis)
set.seed(406)
X_train <- read_csv("~/DeVries_WP/train.csv")
Y_train <- X_train$count
X_test <- read_csv("test.csv")
Y_test <- X_test$count
m1 <- wbart(x.train = X_train[, c(2 : 9, 13)] |> as.matrix(),
y.train = Y_train,
x.test = X_test[, c(2 : 9, 13)] |> as.matrix(),
ntree = 200, power = 2, base = 0.95,
ndpost = 50000, nskip = 200000, sparse = T)
p0 <- ggplot(data = data.frame(resid = X_train$count - m1$yhat.train.mean),
aes(sample = resid)) +
geom_qq(color = "darkgreen", alpha = 0.5) +
geom_qq_line() +
theme_minimal() +
labs(x = "Theoretical Z-Score", y = "Observed Z-Score",
title = "Quantile-Quantile Plot for Residuals from Mean BART Predictions on Training")
p1 <- ggplot() +
geom_point(aes(x = m1$yhat.test.mean,
y = scale(X_test$count - m1$yhat.test.mean)), color = "darkgreen") +
geom_hline(aes(yintercept = 0)) +
theme_minimal() +
labs(title = "Standardized Residuals vs Mean Fitted Values for Training",
x = "Mean Fitted Values", y = "Standardized Residuals")
ggarrange(p0, p1, labels = c("(A)", "(B)"), nrow = 2)
crps_test <- crps_sample(test$count, t(m0$yhat.test))
crps_vals <- crps_sample(Y_test, t(m1$yhat.test))
mosaic::fav_stats(crps_vals) |> round(3) |> knitr::kable()
gc()
ggplot(var_long, aes(fill = variable, x = variable, y = probability)) +
geom_violin(color = "black", trim = FALSE) +
theme_minimal() +
labs(y = "Variable Inclusion Probability", title = "Violin Plots of Variable Inclusion Probabilities") +
scale_fill_viridis_d(name = "")
var_dat <- as.data.frame(m1$varprob)
colnames(var_dat)[9] <- "Dist. Flying\nFox Camp"
var_dat$id <- seq_len(nrow(var_dat))
var_long <- var_dat |>
pivot_longer(cols = -id, names_to = "variable", values_to = "probability") |>
mutate(variable = str_replace(variable, "^prob_", ""),
variable = str_replace(variable, "^.", ~toupper(.x)))
ggplot(var_long, aes(fill = variable, x = variable, y = probability)) +
geom_violin(color = "black", trim = FALSE) +
theme_minimal() +
labs(y = "Variable Inclusion Probability", title = "Violin Plots of Variable Inclusion Probabilities") +
scale_fill_viridis_d(name = "")
ggplot() +
geom_tile(aes(x = lon, y = lat, fill = count), data = X_train) +
scale_fill_gradientn(
colours = c("darkgreen", "forestgreen", "aquamarine2", "cyan"),
name = "Count",
trans = "log1p",
breaks = c(10, 200, 3000, 8600),
values = scales::rescale(c(10, 200, 3000, 8600))
) +
new_scale_fill() +
geom_tile(aes(x = lon, y = lat, fill = crps_vals), data = X_test) +
scale_fill_gradientn(
colours = viridis::inferno(3),
values = scales::rescale(c(10, 500, 4000)),
breaks = c(10, 200, 4000),
trans = "log",
name = "CRPS"
) +
theme_minimal() +
labs(title = "Observed Counts for Training Data and CRPS Values for Testing",
x = "", y = "")
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test |> filter(count > 0),
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = expm1(m1$yhat.test), y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
scale_x_continuous(breaks = seq(1, 5000, by = 1000)) +
coord_cartesian(xlim = c(1, NA)) +
theme_minimal() +
labs(title = "Histogram of Predicted and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Frequency")
p0
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test |> filter(count > 0),
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = m1$yhat.test, y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
scale_x_continuous(breaks = seq(1, 5000, by = 1000)) +
coord_cartesian(xlim = c(1, NA)) +
theme_minimal() +
labs(title = "Histogram of Predicted and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Frequency")
p0
mean(m1$yhat.test)
max(m1$yhat.test.)
quantile(m1$yhat.train, .9)
gc()
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test |> filter(count > 0),
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = m1$yhat.test.mean, y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
scale_x_continuous(breaks = seq(1, 5000, by = 1000)) +
coord_cartesian(xlim = c(1, NA)) +
theme_minimal() +
labs(title = "Histogram of Predicted and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Frequency")
p0
mosaic::fav_stats(m1$yhat.test)
hist(m1$yhat.train)
gc()
hist(m1$yhat.test)
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test,
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = m1$yhat.test, y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
scale_x_continuous(breaks = seq(1, 5000, by = 1000)) +
coord_cartesian(xlim = c(1, NA)) +
theme_minimal() +
labs(title = "Histogram of Predicted and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Frequency")
p0
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test,
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = m1$yhat.test, y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
theme_minimal() +
labs(title = "Histogram of Predicted and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Frequency")
p0
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test,
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = m1$yhat.test, y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
theme_minimal() +
labs(title = "Histogram of Predicted and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Frequency")
p0
p0
gc()
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test,
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = c(m1$yhat.test), y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.5) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
theme_minimal() +
labs(title = "Histogram of Predicted and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Frequency")
p0
gc()
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test,
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = c(m1$yhat.test), y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.3) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
theme_minimal() +
labs(title = "Histogram of Predicted and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Frequency")
p0
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test,
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = c(m1$yhat.test), y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.3) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
theme_minimal() +
labs(title = "Histogram of Predicted and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Relative Frequency")
gc()
p0
gc()
p0 <- ggplot() +
geom_histogram(aes(x = count, y = after_stat(count / sum(count)),
fill = "Observed"),
data = X_test,
color = "black", binwidth = 100, alpha = 1) +
geom_histogram(aes(x = c(m1$yhat.test), y = after_stat(count / sum(count)), fill = "Predicted"),
color = "black", binwidth = 100, alpha = 0.3) +
scale_fill_manual(values = c("Observed" = "gold", "Predicted" = "magenta"), name = "") +
theme_minimal() +
labs(title = "Histograms of Posterior Predictive for Testing and Observed Flying Fox Counts",
x = "Flying Fox Count", y = "Relative Frequency")
p0
gc()
ggplot() +
geom_line(aes(x = 200001 : 250000, y = m1$sigma[200001 : 250000]),
color = "darkgreen") +
theme_minimal() +
labs(title = "Trace Plot for Sigma post Burn in", x = "Iteration", y = "Sigma")
citation("catstats2")
