) +
scale_fill_viridis_c(option = "C", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
proc_dat <- proc_dat %>%
rename_with(
.cols = starts_with("prob_"),
.fn = ~ str_to_title(str_remove(., "^prob_"))
)
View(proc_dat)
proc_dat <- read_csv("~/DeVries_WP/dw_4748.csv")
dat_long <- proc_dat |>
rename_with(
.cols = starts_with("prob_"),
.fn = ~ str_to_title(str_remove(., "^prob_"))
) |>
pivot_longer(
cols = 1 : 9,
names_to = "variable",
values_to = "value"
) |>
mutate(scale_group = if_else(variable == "count", "count", "prob"))
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "B", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "C", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "B", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "A", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "C", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
proc_dat <- read_csv("~/DeVries_WP/dw_4748.csv")
colnames(proc_dat) <- str_to_title(colnames(proc_dat))
dat_long <- proc_dat |>
pivot_longer(
cols = 1 : 9,
names_to = "variable",
values_to = "value"
) |>
mutate(scale_group = if_else(variable == "count", "count", "prob"))
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "C", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = Lon, y = Lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = Lon, y = Lat, fill = value)
) +
scale_fill_viridis_c(option = "C", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
dat_long <- proc_dat |>
rename_with(
.cols = starts_with("prob_"),
.fn = ~ str_to_title(str_remove(., "^prob_"))
) |>
pivot_longer(
cols = 1 : 9,
names_to = "variable",
values_to = "value"
) |>
mutate(scale_group = if_else(variable == "count", "count", "prob"))
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "A", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
proc_dat <- read_csv("~/DeVries_WP/dw_4748.csv")
dat_long <- proc_dat |>
rename_with(
.cols = starts_with("prob_"),
.fn = ~ str_to_title(str_remove(., "^prob_"))
) |>
pivot_longer(
cols = 1 : 9,
names_to = "variable",
values_to = "value"
) |>
mutate(scale_group = if_else(variable == "count", "count", "prob"))
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "A", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
proc_dat <- read_csv("~/DeVries_WP/dw_4748.csv") |> rename(Count = count)
dat_long <- proc_dat |>
rename_with(
.cols = starts_with("prob_"),
.fn = ~ str_to_title(str_remove(., "^prob_"))
) |>
pivot_longer(
cols = 1 : 9,
names_to = "variable",
values_to = "value"
) |>
mutate(scale_group = if_else(variable == "count", "count", "prob"))
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "A", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
proc_dat <- read_csv("~/DeVries_WP/dw_4748.csv") |> rename(Count = count)
dat_long <- proc_dat |>
rename_with(
.cols = starts_with("prob_"),
.fn = ~ str_to_title(str_remove(., "^prob_"))
) |>
pivot_longer(
cols = 1 : 9,
names_to = "variable",
values_to = "value"
) |>
mutate(scale_group = if_else(variable == "Count", "count", "prob"))
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "A", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal()
ggplot() +
geom_tile(
data = filter(dat_long, scale_group == "count"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "D", name = "Count") +
ggnewscale::new_scale_fill() +
geom_tile(
data = filter(dat_long, scale_group == "prob"),
aes(x = lon, y = lat, fill = value)
) +
scale_fill_viridis_c(option = "A", name = "Probability") +
facet_wrap(~ variable, ncol = 3) +
coord_equal() +
theme_minimal() +
labs(title = "Processed Dynamic World and Flying Fox Data", x = "", y = "")
View(proc_dat)
mosaic::fav_stats(proc_dat$area_bare)
train <- read_csv("~/DeVries_WP/train.csv")
test <- read_csv("~/DeVries_WP/test.csv")
?wbart
X_tr <- train[, 2 : 9] |> as.matrix()
X_tes <- test[, 2 : 9] |> as.matrix()
m0 <- wbart(x.train = X_tr, y.train = Y_train, x.test = X_tes)
m0 <- wbart(x.train = X_tr, y.train = train$count, x.test = X_tes)
m0 <- wbart(x.train = X_tr, y.train = train$count, x.test = X_tes,
ndpost = 5000, nskip = 5000)
plot(m0$sigma)
m0 <- wbart(x.train = X_tr, y.train = train$count, x.test = X_tes,
ndpost = 12000, nskip = 12000)
plot(m0$sigma)
# Chunk 1: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
setwd("~/DeVries_WP/")
library(rpart)
library(rpart.plot)
library(ggplot2)
library(tidyverse)
library(plotly)
library(ggpubr)
library(randomForest)
library(fields)
library(mnormt)
library(DiagrammeR)
library(future)
library(future.apply)
library(BART)
library(matrixStats)
library(ggnewscale)
library(raster)
# Chunk 1: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
setwd("~/DeVries_WP/")
library(rpart)
library(rpart.plot)
library(ggplot2)
library(tidyverse)
library(plotly)
library(ggpubr)
library(randomForest)
library(fields)
library(mnormt)
library(DiagrammeR)
library(future)
library(future.apply)
library(BART)
library(matrixStats)
library(ggnewscale)
library(raster)
library(sf)
library(geojsonsf)
library(scoringRules)
set.seed(406)
# Chunk 3: fig-sim1-pred-vis
#| label: fig-sim1-pred-vis
#| fig-cap: Visualization of simulated data and predictions
#| echo: FALSE
set.seed(123)
i <- seq(-pi / 18, pi / 18, 0.001)
noise <- 0.3
x <- 108 * i * sin(i * 108) + rnorm(length(i), 0, noise)
y <- 108 * i * cos(i * 108) + rnorm(length(i), 0, noise)
true0 <- data.frame(
x = x,
y = y,
z = cos(x) * exp(sin(y)) + rnorm(length(i), 0, noise)
)
x <- 108 * i * sin(i * 108) + rnorm(length(i), 0, noise)
y <- 108 * i * cos(i * 108) + rnorm(length(i), 0, noise)
xnn <- 108 * i * sin(i * 108)
ynn <- 108 * i * cos(i * 108)
znn <- cos(xnn) * exp(sin(ynn))
true1 <- data.frame(
x = x,
y = y,
z = cos(x) * exp(sin(y)) + rnorm(length(i), 0, noise)
)
ran0 <- randomForest(data = true0, z ~ i, ntree = 250)
tree0 <- rpart(data = true0, z ~ i,
control = rpart.control(minsplit = 1, minbucket = 1, cp = 0))
opt_i <- which(tree0$cptable[, 4] == min(tree0$cptable[, 4])) |> as.vector()
if (length(opt_i) != 1) {
opt_i <- opt_i[which(tree0$cptable[opt_i, 2] == min(tree0$cptable[opt_i, 2]))]
}
tree1 <- rpart(data = true0, z ~ i,
control = rpart.control(minsplit = 1, minbucket = 1,
cp = tree0$cptable[opt_i, 1]))
func_dat <- data.frame(y = true0$z, i = i, Forest = predict(ran0, newdata = true1),
Tree = predict(tree1, newdata = true1))
quant_theme <- theme(panel.background = element_rect(fill = "white"),
panel.grid = element_line(colour = "grey"),
legend.position = c(0.9, 0.1),
legend.background = element_blank())
ggplot(func_dat) +
geom_line(aes(x = i, y = znn, color = "True Function")) +
geom_line(aes(x = i, y = Tree, color = factor("Tree"))) +
geom_point(aes(x = i, y = z), alpha = 0.2, color = "darkgreen",
data = true0) +
scale_color_manual(
values = c("Tree" = "orange", "True Function" = "darkgreen"),
name = ""
) +
quant_theme +
labs(y = "y", x = "t", title = "CART Fit on Simulated Dataset")
# ggplot(func_dat) +
#   geom_line(aes(x = i, y = znn, color = "True Function")) +
#   geom_line(aes(x = i, y = Forest, color = factor("Forest"))) +
#   geom_line(aes(x = i, y = Tree, color = factor("Tree"))) +
#   geom_point(aes(x = i, y = z), alpha = 0.2, color = "darkgreen",
#              data = true0) +
#   scale_color_manual(
#     values = c("Forest" = "orange", "Tree" = "red", "True Function" = "darkgreen"),
#     name = ""
#   ) +
#   quant_theme +
#   labs(y = "y", x = "t",
#        main = "Random Forest")
# Chunk 4: fig-sim1-tree
#| label: fig-sim1-tree
#| fig-cap: Violin plots of optimal number of splits for simulated data
#| echo: FALSE
noises <- rep(c(0.1, 0.15, 0.2), each = 100) |> matrix()
sim_res <- apply(noises, 1, function(noise) {
x <- 108 * i * sin(i * 108) + rnorm(length(i), 0, noise)
y <- 108 * i * cos(i * 108) + rnorm(length(i), 0, noise)
train <- data.frame(
x = x,
y = y,
z = cos(x) * exp(sin(y)) + rnorm(length(i), 0, noise),
i = i
)
x <- 108 * i * sin(i * 108) + rnorm(length(i), 0, noise)
y <- 108 * i * cos(i * 108) + rnorm(length(i), 0, noise)
test <- data.frame(
x = x,
y = y,
z = cos(x) * exp(sin(y)) + rnorm(length(i), 0, noise),
i = i
)
tree0 <- rpart(data = train, z ~ i, control =
rpart.control(minsplit = 1, minbucket = 1, cp = 0))
opt_i <- which(tree0$cptable[, 4] == min(tree0$cptable[, 4])) |>
as.vector()
if (length(opt_i) > 1) {
opt_i <- min(opt_i)
}
tree1 <- rpart(data = train, z ~ i, control =
rpart.control(minsplit = 1, minbucket = 1,
cp = tree0$cptable[opt_i, 1]))
return(c(tree0$cptable[opt_i, c(1, 2, 4)], noise,
mean((test$z - predict(tree1, newdata = test)) ^ 2)))
}) |> t() |> as.data.frame()
train <- read_csv("~/DeVries_WP/train.csv")
test <- read_csv("~/DeVries_WP/test.csv")
X_tr <- train[, 2 : 9] |> as.matrix()
X_tes <- test[, 2 : 9] |> as.matrix()
m0 <- wbart(x.train = X_tr, y.train = train$count, x.test = X_tes,
ndpost = 60000, nskip = 60000)
plot(m0$sigma)
crps(test$count, t(m0$yhat.test))
crps <- crps(test$count, t(m0$yhat.test))
gc()
crps
crps_test <- crps(test$count, t(m0$yhat.test))
gc()
rm(crps)
rm(crps_test)
crps_test <- crps_sample(test$count, t(m0$yhat.test))
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test))
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_viridis_b()
?scale_fill_viridis_b
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_manual(breaks = c(10, 20, 50, 100, 1000, 2000, 4000))
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_gradientn(
colours = c("blue", "green", "yellow", "red"),
values = scales::rescale(c(10, 20, 50, 100, 1000, 2000, 4000)),
breaks = c(10, 20, 50, 100, 1000, 2000, 4000),
guide = "colorbar"
)
colors[10]
colors(10)
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_gradientn(
colours = colors()[7],
values = scales::rescale(c(10, 20, 50, 100, 1000, 2000, 4000)),
breaks = c(10, 20, 50, 100, 1000, 2000, 4000),
guide = "colorbar"
)
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_gradientn(
colours = brewer.pal(7, "Set1"),
values = scales::rescale(c(10, 20, 50, 100, 1000, 2000, 4000)),
breaks = c(10, 20, 50, 100, 1000, 2000, 4000)
)
install.packages("RcolorBrewer")
gc()
library(viridis)
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_gradientn(
colours = viridis(7, option = "plasma"),
values = scales::rescale(c(10, 20, 50, 100, 1000, 2000, 4000)),
breaks = c(10, 20, 50, 100, 1000, 2000, 4000)
)
?viridis
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_gradient(
colours = viridis(7, option = "plasma"),
values = scales::rescale(c(10, 20, 50, 100, 1000, 2000, 4000)),
breaks = c(10, 20, 50, 100, 1000, 2000, 4000)
)
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_gradientn(
colours = viridis(7, option = "plasma"),
values = scales::rescale(c(10, 20, 50, 100, 1000, 2000, 4000)),
breaks = c(10, 20, 50, 100, 1000, 2000, 4000)
)
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_gradientn(
colours = viridis(7, option = "plasma"),
values = scales::rescale(c(10, 20, 50, 100, 1000, 2000, 4000)),
breaks = c(10, 20, 50, 100, 1000, 2000, 4000),
trans = "log"
)
ggplot(test) +
geom_tile(aes(x = lon, y = lat, fill = crps_test)) +
scale_fill_gradientn(
colours = viridis(7, option = "plasma"),
values = scales::rescale(c(10, 20, 50, 100, 1000, 2000, 4000)),
breaks = c(10, 20, 50, 100, 1000, 2000, 4000),
trans = "log"
) +
theme_minimal()
mosaic::fav_stats(crps_test) |> knitr::kable()
gc()
