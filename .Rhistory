with pm.Model() as bart_mod:
exit
dat = pd.read_csv('/home/benjamin/DeVries_WP/dw4py.csv')
dat.rename(columns={'dw_dat$count': 'Y'}, inplace = True)
import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import pymc as pm
import pymc_bart as pmb
import scipy as sp
import pytensor.tensor as pt
import properscoring as ps
import gc
import sys
import random
from scipy.stats import qmc as qmc
dat = pd.read_csv('/home/benjamin/DeVries_WP/dw4py.csv')
dat.rename(columns={'dw_dat$count': 'Y'}, inplace = True)
with pm.Model() as bart_mod:
X_obs = pm.Data('X_obs', dat.drop(columns = ['Y']))
Y_obs = pm.Data('Y_obs', dat['Y'])
bart = pmb.BART('bart', X = X_obs, Y = Y_obs, m = 200, beta = 2.2, alpha = 0.999, separate_trees = True)
#alpha = pm.Exponential('alpha', lam = 1)
mu = pm.Deterministic('mu', pt.exp(bart))
Z_i = pm.Poisson('Z_i', mu = mu, observed = Y_obs)
trace_bart = pm.sample(10000, tune = 10000, return_inferencedata = True)
sum_res = az.summary(trace_bart)
import pymc_bart as pmb
with pm.Model() as bart_mod:
X_obs = pm.Data('X_obs', dat.drop(columns = ['Y']))
Y_obs = pm.Data('Y_obs', dat['Y'])
bart = pmb.BART('bart', X = X_obs, Y = Y_obs, m = 200, beta = 2.2, alpha = 0.999, separate_trees = True)
#alpha = pm.Exponential('alpha', lam = 1)
mu = pm.Deterministic('mu', pt.exp(bart))
Z_i = pm.Poisson('Z_i', mu = mu, observed = Y_obs)
trace_bart = pm.sample(10000, tune = 10000, return_inferencedata = True)
with pm.Model() as bart_mod:
X_obs = pm.Data('X_obs', dat.drop(columns = ['Y']))
Y_obs = pm.Data('Y_obs', dat['Y'])
bart = pmb.BART('bart', X = X_obs, Y = Y_obs, m = 50, beta = 2, alpha = 0.6, separate_trees = True)
alpha = pm.Exponential('alpha', lam = 2)
mu = pm.Deterministic('mu', pt.exp(bart))
Z_i = pm.NegativeBinomial('Z_i', mu = mu, alpha = alpha, observed = Y_obs)
trace_bart = pm.sample(1000, tune = 1000, return_inferencedata = True)
sum_res = az.summary(trace_bart)
bart_mod.debug()
dat = pd.read_csv('/home/benjamin/DeVries_WP/dw4py.csv')
dat.rename(columns={'dw_dat$count': 'Y'}, inplace = True)
with pm.Model() as bart_mod:
X_obs = pm.Data('X_obs', dat.drop(columns = ['Y']))
Y_obs = pm.Data('Y_obs', dat['Y'])
bart = pmb.BART('bart', X = X_obs, Y = Y_obs, m = 50, beta = 3, alpha = 0.6, separate_trees = True)
alpha = pm.Exponential('alpha', lam = 2)
mu = pm.Deterministic('mu', pt.exp(bart))
Z_i = pm.NegativeBinomial('Z_i', mu = mu, alpha = alpha, observed = Y_obs)
trace_bart = pm.sample(1000, tune = 1000, return_inferencedata = True, target_accept = 0.95)
sum_res = az.summary(trace_bart)
trace_bart
library(BART)
library(tidyverse)
dw_dat <- read_csv("~/DeVries_WP/dw_complete.csv")
coords_fun <- function(a) {
vals <- a %>%
gsub("list\\(c\\(|\\)", "", .) %>%
strsplit(",") %>%
.[[1]] %>%
as.numeric()
lon <- vals[which(vals > 100)]
lat <- vals[which(vals <= 100)]
return(c(mean(lon), mean(lat)))
}
coords <- sapply(dw_dat$geometry, coords_fun) |> t()
colnames(coords) <- c("lon", "lat")
rownames(coords) <- NULL
X <- cbind(selected_columns, coords)
View(dw_dat)
X <- cbind(dw_dat |> select(starts_with("prob_")), coords)
Y <- log(dw_dat$density * 1e4 / 3 + .Machine$double.eps) |> as.vector()
m0 <- wbart(x.train = X, y.train = Y, ntree = 600,
ndpost = 10000, nskip = 10000)
library(bartMan)
bartDiag(m0, response = Y)
?wbart
gc()
m0 <- wbart(x.train = X, y.train = Y, ntree = 600, power = 1
ndpost = 10000, nskip = 10000)
m0 <- wbart(x.train = X, y.train = Y, ntree = 600, power = 1,
ndpost = 10000, nskip = 10000)
View(coords)
bartDiag(m0, response = Y)
reticulate::repl_python()
reticulate::py_install("pymc_bart")
reticulate::py_install("pymc")
reticulate::py_install("pymc-5.20.1")
reticulate::py_install("pymc==5.20.1")
reticulate::repl_python()
dw_dat <- read_csv("~/DeVries_WP/dw_complete.csv")
library(tidyverse)
dw_dat <- read_csv("~/DeVries_WP/dw_complete.csv")
View(dw_dat)
library(sp)
dw_dat <- read_csv("~/DeVries_WP/dw_complete.csv")
str(dw_dat)
dw_dat <- dw_dat %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(
lon = st_coordinates(centroid)[,1],
lat = st_coordinates(centroid)[,2]
)
library(sf)
dw_dat <- dw_dat %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(
lon = st_coordinates(centroid)[,1],
lat = st_coordinates(centroid)[,2]
)
class(dw_dat$geometry)
dw_dat <- st_as_sf(dw_dat)
dat_228 <- read_csv("~/DeVries_WP/all_bat.csv")
extracted <- apply(matrix(dat_228[, 4]), 1, function(a) {
return(str_extract_all(a, "-?\\d+\\.\\d+|-?\\d+")[[1]])
}) |> as.numeric() |>  as.data.frame()
colnames(extracted) <- "val_type"
extracted$row_id <- rep(1 : nrow(dat_228), each = 4)
extracted_wide <- cbind(extracted, rep(c("Long", "Lat", "Val1", "Val2"),
nrow(dat_228))) |>
pivot_wider(
id_cols = row_id,
names_from = `rep(c(\"Long\", \"Lat\", \"Val1\", \"Val2\"), nrow(dat_228))`,
values_from = val_type
)
grid_ee <- read_csv("~/Downloads/bb_grid(3).csv")
grid_ee_sf <- geojson_sf(grid_ee$.geo)
library(geojsonsf)
grid_ee_sf <- geojson_sf(grid_ee$.geo)
bats_sf <- st_as_sf(extracted_wide[, 2 : 3], coords = c("Long", "Lat"))
st_crs(bats_sf) <- st_crs(grid_ee_sf)
grid_ee_sf$count <- lengths(st_intersects(grid_ee_sf, bats_sf))
dw_files <- list.files(path = "~/Downloads/dw_rasts/",
pattern = "^dynamic_world.*\\.csv$", full.names = T)
dw_dats <- list(8)
type <- c("bare", "built", "crops", "flooded", "grass", "shrub", "trees", "water")
for (i in 1 : length(dw_files)) {
tmp <- read_csv(dw_files[i])
colnames(tmp) <- c("index", paste0("area_", type[i]), paste0("prob_", type[i]),
"geo")
grid_ee_sf <- cbind(grid_ee_sf, tmp[, 2 : 3])
}
grid_ee_sf$density <- grid_ee_sf$count / grid_ee_sf$area_bare
View(grid_ee_sf)
grid_ee_sf <- grid_ee_sf %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(
lon = st_coordinates(centroid)[,1],
lat = st_coordinates(centroid)[,2]
)
View(grid_ee_sf)
plot(grid_ee_sf$centroid)
View(grid_ee_sf, axes = T)
ggplot(grid_ee_sf) +
geom_sf(aes(geometry = centroid), color = "blue", size = 1) +
coord_sf() +
labs(title = "Centroids", x = "Longitude", y = "Latitude") +
theme_minimal()
coords <- st_coordinates(grid_ee_sf$centroid)
write_csv(cbind(grid_ee_sf, coords), "~/DeVries_WP/dw_complete.csv")
reticulate::repl_python()
coords
relevant <- grid_ee_sf |> as.data.frame() |> select(starts_with("probs_"))
relevant <- grid_ee_sf |> as.data.frame() |> str()
relevant <- grid_ee_sf |> as.data.frame() |> select(starts_with("prob_"))
relevant <- grid_ee_sf |> as.data.frame() |> select(starts_with("prob_"), area_bare)
relevant <- cbind(grid_ee_sf |> as.data.frame() |> select(starts_with("prob_"), area_bare), coords)
View(relevant)
colnames(coords) <- c("lon", "lat")
relevant <- cbind(grid_ee_sf |> as.data.frame() |> select(starts_with("prob_"), area_bare), coords)
View(relevant)
View(grid_ee_sf)
relevant <- cbind(grid_ee_sf |> as.data.frame() |> select(coords, starts_with("prob_"), area_bare), coords)
relevant <- cbind(grid_ee_sf |> as.data.frame() |> select(count, starts_with("prob_"), area_bare), coords)
View(relevant)
write_csv(cbind(grid_ee_sf, coords), "~/DeVries_WP/dw_complete.csv")
reticulate::repl_python()
#| echo: false
#| output: false
dat_228 <- read_csv("~/DeVries_WP/all_bat.csv")
library(tidyverse)
library(sf)
dat_228 <- read_csv("~/DeVries_WP/all_bat.csv")
extracted <- apply(matrix(dat_228[, 4]), 1, function(a) {
return(str_extract_all(a, "-?\\d+\\.\\d+|-?\\d+")[[1]])
}) |> as.numeric() |>  as.data.frame()
colnames(extracted) <- "val_type"
extracted$row_id <- rep(1 : nrow(dat_228), each = 4)
extracted_wide <- cbind(extracted, rep(c("Long", "Lat", "Val1", "Val2"),
nrow(dat_228))) |>
pivot_wider(
id_cols = row_id,
names_from = `rep(c(\"Long\", \"Lat\", \"Val1\", \"Val2\"), nrow(dat_228))`,
values_from = val_type
)
grid_ee <- read_csv("~/Downloads/bb_grid(3).csv")
grid_ee_sf <- geojson_sf(grid_ee$.geo)
library(geojsonsf)
grid_ee <- read_csv("~/Downloads/bb_grid(3).csv")
grid_ee_sf <- geojson_sf(grid_ee$.geo)
bats_sf <- st_as_sf(extracted_wide[, 2 : 3], coords = c("Long", "Lat"))
st_crs(bats_sf) <- st_crs(grid_ee_sf)
grid_ee_sf$count <- lengths(st_intersects(grid_ee_sf, bats_sf))
dw_files <- list.files(path = "~/Downloads/dw_rasts/",
pattern = "^dynamic_world.*\\.csv$", full.names = T)
dw_dats <- list(8)
type <- c("bare", "built", "crops", "flooded", "grass", "shrub", "trees", "water")
for (i in 1 : length(dw_files)) {
tmp <- read_csv(dw_files[i])
colnames(tmp) <- c("index", paste0("area_", type[i]), paste0("prob_", type[i]),
"geo")
grid_ee_sf <- cbind(grid_ee_sf, tmp[, 2 : 3])
}
grid_ee_sf$density <- grid_ee_sf$count / grid_ee_sf$area_bare
grid_ee_sf <- grid_ee_sf %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(
lon = st_coordinates(centroid)[,1],
lat = st_coordinates(centroid)[,2]
)
coords <- st_coordinates(grid_ee_sf$centroid)
colnames(coords) <- c("lon", "lat")
relevant <- cbind(grid_ee_sf |> as.data.frame() |> select(count, starts_with("prob_"), area_bare), coords)
write_csv(cbind(relevant, coords), "~/DeVries_WP/dw_complete.csv")
relevant <- cbind(grid_ee_sf |> as.data.frame() |> select(count, starts_with("prob_"), area_bare))
View(relevant)
relevant <- cbind(grid_ee_sf |> as.data.frame() |> select(count, starts_with("prob_"), area_bare), coords)
write_csv(relevant, "~/DeVries_WP/dw_complete.csv")
reticulate::repl_python()
reticulate::py_install("pytensor")
reticulate::py_install("pytensor==2.28")
reticulate::py_install("pytensor==2.27.9")
reticulate::py_install("pytensor==2.27.1")
reticulate::repl_python()
reticulate::install_miniconda()
reticulate::conda_create("r-pytensor-env", packages = c("python=3.11"))
reticulate::conda_install("r-pytensor-env", packages = c("pytensor", "numpy", "scipy", "arviz", "matplotlib", "pymc_bart", "properscoring", "pandas"))
reticulate::conda_install("r-pytensor-env", packages = c("pytensor", "numpy", "scipy", "arviz", "matplotlib", "properscoring", "pandas"))
reticulate::conda_install("r-pytensor-env", packages = "pymc-bart", pip = TRUE)
reticulate::use_condaenv("r-pytensor-env", required = TRUE)
reticulate::use_condaenv("r-pytensor-env", required = TRUE)
reticulate::repl_python()
