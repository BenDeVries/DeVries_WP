---
title: 'DeVries Writing Project'


format:
  pdf:
    toc: true
    number-sections: true
    cite-method: natbib
    include-in-header: 
      - "WPROJ.sty"
    include-before-body:
      - "coversheet.tex"

fontsize: 12pt
linestretch: 2
bibliography: references.bib

editor: source
---

```{r setup}
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(rpart.plot)
library(ggplot2)
library(tidyverse)
library(plotly)
library(ggpubr)
library(randomForest)
```

\newpage

# Introduction {#sec:intro}

This is my introduction, Section \ref{sec:intro}. This problem is important because... Here is the motivation for my study.

In \ref{sec:background}, I will review the literature on this topic. \ref{sec:methods} describes my methods. Finally, in \ref{sec:conclusion}, I will discuss the implications of this research and future work.

## Subsection

This is a subsection in my Introduction section.

# Literature Review {#sec:background}

Statistical Modelling: the Two Cultures \citep{Breiman_2001} describes two approaches to data problems; data, and algorithmic models. Data modelling is described as classical statistics where data is assumed to be generated by some data generating stochastic process. In some cases, this is well warranted by previous research. In many cases though, the true underlying process contains complex dynamics that may or may not be observable. Algorithmic modelling sub goes distributional assumptions, instead focusing on finding the optimal function $f$ to map the feature set $\bm X$ to $\bm Y$. Here, we provide a brief review tree based methods, including random forests. All notes are based on the Elements of Statistical Learning text \citep{Hastie_Tibshirani_Friedman_2009}.\\
Decision trees 

# Methods {#sec:methods}
#tcosθ−f(t)sinθ, y=tsinθ+f(t)cosθ
To investigate the effect of sample size and the number of terminal nodes on accuracy

```{r}
i <- seq(-pi / 18, pi / 18, 0.0001)
noise <- 0.1

x <- 108 * i * sin(i * 108) + rnorm(length(i), 0, noise)
y <- 108 * i * cos(i * 108) + rnorm(length(i), 0, noise)

true <- data.frame(
  x = x,
  y = y,
  z = cos(x) * exp(sin(y)) + rnorm(length(i), 0, noise)
)
tree0 <- rpart(data = true, z ~ i, control =
  rpart.control(cp = 0, minsplit = 1, minbucket = 1))
plot_ly() %>%
  add_trace(
    data = true,
    x = ~ true$x, y = ~ true$y, z = ~ true$z,
    mode = 'markers',
    type = 'scatter3d',
    marker = list(color = 'salmon', size = 6, opacity = 0.5),
    name = 'True Values'
  ) %>%
  add_trace(
    x = true$x, y = ~ true$y, z = ~ predict(tree0),
    mode = 'markers',
    type = 'scatter3d',
    marker = list(color = 'black', size = 2, opacity = 1),
    name = 'Predictions'
  ) %>%
  layout(
    title = "3D Scatter Plot of System With no Noise",
    scene = list(
      xaxis = list(title = 'X'),
      yaxis = list(title = 'Y'),
      zaxis = list(title = 'Z')
    )
  )
ggplot() +
  geom_point(aes(x = i, y = true$z)) +
  labs(title = "Response vs Predictor", x = "Response", y = "Predictor")
ggplot() +
  geom_line(aes(x = true$z, y = predict(tree0)))
sum((predict(tree0) - true$z) ^ 2)
```

```{r}
noises <- rep(seq(0, 1, length.out = 30), each = 100) %>% matrix()
sim_res <- apply(noises, 1, function(noise) {
  x <- 108 * i * sin(i * 108) + rnorm(length(i), 0, noise)
  y <- 108 * i * cos(i * 108) + rnorm(length(i), 0, noise)
  true <- data.frame(
    x = x,
    y = y,
    z = cos(x) * exp(sin(y)) + rnorm(length(i), 0, noise),
    i = i
  )
  tree0 <- rpart(data = true, z ~ i, control =
                   rpart.control(minsplit = 0, minbucket = 1, cp = 0))
  ran0 <- randomForest(z ~ i, true)
  opt_i <- which(tree0$cptable[, 4] == min(tree0$cptable[, 4])) %>% as.vector()
  if (length(opt_i) != 1) {
    opt_i <- opt_i[which(tree0$cptable[opt_i, 2] == min(tree0$cptable[opt_i, 2]))]
  }
  return(c(tree0$cptable[opt_i, c(1, 2, 4)], noise))
}) %>% t() %>% as.data.frame()

ggplot(sim_res %>% as.data.frame()) +
  geom_point(aes(x = V4, y = CP), alpha = 0.2, colour = "maroon") +
  labs(x = "Standard Deviation of Noise", y = "Optimal Complexity Parameter")

ggplot(sim_res %>% as.data.frame()) +
  geom_point(aes(x = V4, y = nsplit), alpha = 0.2, colour = "orange") +
  labs(x = "Standard Deviation of Noise", y = "Optimal Number of Splits")

ggplot(sim_res %>% as.data.frame()) +
  geom_point(aes(x = V4, y = xerror), alpha = 0.2, colour = "salmon") +
  labs(x = "Standard Deviation of Noise", y = "Standardized Cross Validation Error")
```


```{=tex}
\begin{figure}[h]
\centering
\includegraphics[width=10cm]{figures/correlation}
\caption{My favorite statistical cartoon \citep{xkcd}.}
\label{cartoon}
\end{figure}
```
Then, later in the text, we may reference Figure \ref{cartoon}.

# Conclusion {#sec:conclusion}

Amazing conclusions will be described in this section.
